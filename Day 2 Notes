Arrays -> lists, indexed at 0, has elements
Saves outputs as arrays

(Get-Process).GetType() -> gets type of anything, every newline is a part of an array

each line has its own index position


$proc = get-process, $proc[0], will get the first index, [-1] for the last one
 $procs -is [array]: true
 $var -is [array]: false
 
 to find the amount of items in an array
 
 $proc.Count
 $proc.length

create an array 

  $array = 1,5,10
  $array = 1..25


polymorphic arrays
  
can store multiple data types in polymorphic arrays

$array2 = "world". "hello", 5, 10, (Get-Date)

($array[-1]).gettype() -> system.valuetype

out of index does not get any errors for polymorphic arrays

create an empty array
  $array3=@()
  
$array[$array.Count-1]

(-4..10)[4] gets a number in range -4 to 10 so gets -3

can display multiple indexes of the array at once

$array[4,0,1,2] -> in the order specified

Append to an array
$a += @(4,5,6)
$a[0] -> 4
Append a nested array
$a += , @(7,8,9)
$a[-1] = 7,8,9

Multiply strings
"_" * 20 -> _ 20x

@('BOOM') * 20
an array with 20 lines, all index posiotions, with boom in it

1..20 -> array from 1, 20

Target Array = @(
 (ele1,1 ele1,2 ele1,3),
 (ele2,1 ele 2,2 ele2,3)
)

--------------------------------------------------------------------
Jagged Array
-------------------------------------------------------------------
Nested array
$jagarrayexamp="joe", "jim", (1,('apple', 'pear'), 3), "jay"

to get a value in a nested array
$array[indexofarray][index1..][index2..]

---------------------------------------------------------------------
LOOOPS
---------------------------------------------------------------------
foreach ($line in $TargetingArray) {
  if ($line[-1] -eq 'Bejing') {
   Write-Output $line
   }
}

