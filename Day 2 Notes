Arrays -> lists, indexed at 0, has elements
Saves outputs as arrays

(Get-Process).GetType() -> gets type of anything, every newline is a part of an array

each line has its own index position


$proc = get-process, $proc[0], will get the first index, [-1] for the last one
 $procs -is [array]: true
 $var -is [array]: false
 
 to find the amount of items in an array
 
 $proc.Count
 $proc.length

create an array 

  $array = 1,5,10
  $array = 1..25


polymorphic arrays
  
can store multiple data types in polymorphic arrays

$array2 = "world". "hello", 5, 10, (Get-Date)

($array[-1]).gettype() -> system.valuetype

out of index does not get any errors for polymorphic arrays

create an empty array
  $array3=@()
  
$array[$array.Count-1]

(-4..10)[4] gets a number in range -4 to 10 so gets -3

can display multiple indexes of the array at once

$array[4,0,1,2] -> in the order specified

Append to an array
$a += @(4,5,6)
$a[0] -> 4
Append a nested array
$a += , @(7,8,9)
$a[-1] = 7,8,9

Multiply strings
"_" * 20 -> _ 20x

@('BOOM') * 20
an array with 20 lines, all index posiotions, with boom in it

1..20 -> array from 1, 20

Target Array = @(
 (ele1,1 ele1,2 ele1,3),
 (ele2,1 ele 2,2 ele2,3)
)

--------------------------------------------------------------------
Jagged Array
-------------------------------------------------------------------
Nested array
$jagarrayexamp="joe", "jim", (1,('apple', 'pear'), 3), "jay"

to get a value in a nested array
$array[indexofarray][index1..][index2..]

---------------------------------------------------------------------
LOOOPS
---------------------------------------------------------------------
foreach ($line in $TargetingArray) {
  if ($line[-1] -eq 'Bejing') {
   Write-Output $line
   }
}

-------------------------------------------------------------------------
Script Block
-------------------------------------------------------------------------
$myblock = { get-service | format-table name, status}
& $myblock -> will run the block

$a = 1
$b = {1 + 1}

$a += &$b
$a = 3

good for getting live results from a command
-----------------------------------------------------------------------
Sorting and Grouping
-----------------------------------------------------------------------

Get-Childitem | Sort-Object -Descending

Sort-Object Options
 -Descending
 -Property <property of previous piped command> #Get properties with Get-Memeber
 
Grouping Objects
 
Get-Service | Group-Object status
 will group results based on the status

Example output)

 Count Name                      Group                                                                                                                              
----- ----                      -----                                                                                                                              
  180 Stopped                   {AarSvc_2cb22e1, AJRouter, ALG, AppIDSvc...}                                                                                       
   83 Running                   {Appinfo, AudioEndpointBuilder, Audiosrv, BFE...}                                                                                  

Get-Childeitem | Group-Object {$_.length -lt 1kb}
{$_.} pipeline variable, whats being passed through the pipeline

Example output)


Count Name                      Group                                                                                                                              
----- ----                      -----                                                                                                                              
  188 True                      {0409, AdvancedInstallers, am-et, AppLocker...}                                                                                    
 4323 False                     {69fe178f-26e7-43a9-aa7d-2b616b672dde_eventlogservice.dll

1, 3, 5, 8, 2, 10 | Sort-Object -> Sorted Numerically
'1', '3', '5', '8', '2', '10' | Sort-Object -> ASCII Value

PS C:\windows\system32> 1..10 | Sort-Object -Property {Get-Random}
5
7
9
8
1
4
10
2
6
3

PS C:\windows\system32> Get-Process | Select-Object -First 10

Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName                                                                                              
-------  ------    -----      -----     ------     --  -- -----------                                                                                              
    228      13     7288      20296       0.08   2552   2 conhost                                                                                                  
    527      20     1896       2428       4.69    464   0 csrss                                                                                                    
    169      10     1620       1472       0.20    556   1 csrss                                                                                                    
    339      14     1816       2816      15.81   6088   2 csrss                                                                                                    
    416      16     4044       8852       2.52   2244   2 ctfmon                                                                                                   
    218      16     3540       3524       0.13   3936   2 dllhost                                                                                                  
    698      24    18736      17192       0.50   1120   1 dwm                                                                                                      
    800      34    35668      81740      13.73   4180   2 dwm                                                                                                      
   2042      79    38160      62908      21.09   4984   2 explorer                                                                                                 
     37       5     1196       1272       0.00    868   1 fontdrvhost
     
PS C:\windows\system32> Get-Process | Select-Object name, id -first 4

Name      Id
----      --
conhost 2552
csrss    464
csrss    556
csrss   6088

-expand property expans the property

Where-Object - Conditional, outputs what you want the condition to be

PS C:\windows\system32> get-service | where-object {$_.Status -eq 'running'} | select-object -first 5

Status   Name               DisplayName                           
------   ----               -----------                           
Running  Appinfo            Application Information               
Running  AudioEndpointBu... Windows Audio Endpoint Builder        
Running  Audiosrv           Windows Audio                         
Running  BFE                Base Filtering Engine                 
Running  BrokerInfrastru... Background Tasks Infrastructure Ser...

Get-Childitem *.txt | where-object {$_.Length -lt 1.5kb} #Length is in bytes
Directory: C:\windows\system32

Mode                 LastWriteTime         Length Name                                                                                                             
----                 -------------         ------ ----                                                                                                             
-a----        12/23/2022  11:02 AM           1370 ThirdPartyNoticesBySHS.txt


PS C:\windows\system32> Get-Process | Where-Object {$_.Name -like "*powershell*"}

#-not/like: wild card matching
#-match: regex
#-eq: no wild cards, exact match

Handles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName                                                                                              
-------  ------    -----      -----     ------     --  -- -----------                                                                                              
   1096      90   480036     533432     470.73   4632   2 powershell_ise 

1,2,3,1,2,3 | Sort-Object | Get-Unique #Needs to be in this order, will not work the other way

Measure Object

 PS C:\windows\system32> "hello", "goodbye" | measure-object length


Count    : 2
Average  : 
Sum      : 
Maximum  : 
Minimum  : 
Property : length

PS C:\windows\system32> 1..10 | Measure-object -average -Sum


Count    : 10
Average  : 5.5
Sum      : 55
Maximum  : 
Minimum  : 
Property : 


PS C:\windows\system32> 'i bet you all cant wait to graduate' > test.txt
$before = Get-Childitem
'4' > test.txt
$after = gci

Compare-Object $before $after -Property length, name

length name     SideIndicator
------ ----     -------------
     8 test.txt =>           
    76 test.txt <= 
----------------------------------------------------------------
Creating an Object
----------------------------------------------------------------
$MyTruck = New-Object object
$MyTruck | Get-Member -> if nothing was added, has default properties

$MyTruck = New-Object object
$MyTruck | Get-Member
Add-Member -MemberType NoteProperty -Name Color -Value Black -InputObject $MyTruck
$MyTruck.Color #will return black

Add-Member -me NoteProperty -in(#putobject) $MyTruck -na Make -va Ford
$MyTruck.Make = Ford

$MyTruck | Add-Member NoteProperty -Name Model -Value F150

Adding Methods
 add-member -Membertype ScriptMethod -InputObject $MyTruck 0-name Drive -Value {"Going on a roadtrip"}
 $MyTruck | Add-Member ScriptMethod -Name Park -Value {"Finding a spot"}
 $MyTruck | Add-Member Sscriptmethod PistonCup {"He did what in his cup"}
 PS C:\windows\system32> ($MyTruck).PistonCup()
 He did what in his cup
 
 
 
Exercise
Create a custom Object
$compinfo = Get-WmiObject Win32_ComputerSystem
$osinfo = Get-WmiObject Win32_OperatingSystem
$biosinfo = Get-wmiobject win32_BIOS
$diskinfo = Get-WmiObject Win32_LogicalDisk

$myobject = New-Object psobject

$myobject | Add-Member -MemberType NoteProperty -name Coputername -Value $compinfo.name
$myobject | Add-Member -MemberType NoteProperty -name OperatingSystem -Value $osinfo.Caption
$myobject | Add-Member -MemberType NoteProperty -name Version -Value $osinfo.Version
$myobject | Add-Member -MemberType NoteProperty -name Manafacturer $biosinfo.Manafacturer
$myobject | Add-Member -MemberType NoteProperty -name Disks $diskinfo.__path

-----------------------------------------------------------------------------------------------
psproviders
Get-PSDrive
new-psdrive -name Z -PSProvider FileSystem -Root \\live.sysinternals.com\tools
start-service -name webclient

can cd z:
cd [PSDrive]:

-------------------------------------------------------------------------------------------------------
-eq 
-ne
-gt
-lt
-le
-ge
-like
-match
-notlike
-notmatch
-replace #regex pattern
-contains #is contained
-noncontains #if it does not contain
-in # true or false
-is #see if it is same type

2 -eq 2 #True
2 -eq  3 # false
1,2,3 -eq 2 returns the value in it
"abc" -eq "abc" #True
"abc" -eq "abc", "def" #False
"abc". "def" -eq "abc" #returns abc

greater than
8 -gt 6 #true
7,8,9,10 -gt 8 #9, 10

-like
"Powershell" -like "*shell"
"Poweshell", "Server" -like "*shell"

-contains
$fruit = apple, orrange, pear, tomato
$fruit -contains 'tomato' #True

-notlike
"Pink" -notlike "[A-F]ink"

Combination

(($num -gt 1) -and ($num -lt 10))

-------------------------------------------------------------------------------------------
Flow COntrol

if
$x = 11
if ($x -gt 10) {"$x is greater than 10"}

$x=8
if ($x -le 9) {
 write-host "$x is not equal to 9" -ForegroundColor Gray
 }
 8 is not equal to 9
 
 if else
 
 if ( Conditional Statemnet ){
   Code Block
 }
 elseif( Conditional Statement ){
   Code Block
 }
 else {
 }
 
 $fruit = "C"
 swithc($fruit) {
 a {"apple"}
 b {"banana"}
 c {"cranberry"}
 }
 -----------------------
 Loops
 -------------------------
 $nums = 1,2,3,4,5
 $nums | foreach-object{$_ * 2}
 
 $list = 'a', 'b', 'c'
 $list | foreach {$_.ToUpper()}

Get-Childitem | foreach-object {$_.length / 1kb}

foreach ($item in 1..5){$item * 2}
$teams = "Tiger", "Pistons", "Red Wings", "Lions"
foreach ($team in  $teams){"Detroit $team"}

$num = 0
while ($num -lt 3) {
  $num 
  $num++
}
-------------------------------------------------------------------------------
$num = 0
do {
 $num
 $num
} while($num -lt 3)

#do until
$num=0
do {
  $num
  $num++
}until($num -gt 3)
-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
for loop
for ($num = 1; $num -le 3; $num++){$num}

for ($i = 0; $i -le 225; $i++){
  Write-Host 192.168.$i
}

-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
Writing / Reading from file

#read
  Set-Content -path .\example.txt -value "A String"
#write
  Get-Content -path .\example.txt
  "A new string" > .\example.txt
  "another one" >> .\example.txt
  "add-content" -path .\example.txt -value "another one"
  
  '"Odoyle RUkes"' > Odoyle-script.ps1
  .\Odoyle-script.ps1
  -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
  @'
  "Odoyle Rules!"
  "More code"
  get-service
  get-childitem
  '@ > Anotherdyole-script.ps1
  
  .\Anotherdoyle-script.ps1
  
  -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
  Creating a hash table
  specifies key value pairs
  ; semi colon to assign the keys
  
  $mylist = @{First = "John"; Last = "Doe"; Mid = "Bon"; Age = "69"}
  
