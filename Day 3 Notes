$employee1 = @{
'First' = 'Mary'
'Last' = 'Hopper'
'ID' = '001'
'Job' = 'Software Developer'
}

$employee2 = @{
'First' = 'John'
'Last' = 'Williams'
'ID' = '002'
'Job' = 'Web Developer'
}

$employee.first = "Mary"
$employee["last"]= "Hopper"

#$employee1
#$employee2

$employee2 += @{'Username' = 'mhopper001'}
$employee2

$employee1["Job"]="Software Lead"
$employee1

$employeelist = @[ordered]{
'First' = 'John', 'Alex'
'Last' = 'Williams', 'Moran'
'ID' = '002', '003'
'Job' = 'Web Developer', 'Software Developer'
}

$employee3=@[ordered]{
'First' = 'Alex'
'Last' = 'Moran'
'ID' = '003'
'Job' = 'Software Developer'
}
$employee3

get special characeters
"<text> `"<text>`""
'text "quotation marks"'

system variables denoted by $ can do math inside like $( var + var)
"Here is another`nline of text"


Here strings

text = @"
Here is a some text with `"quotes`".
....
"$PWD" is your current path
"@

will resolve the variables for you

0 is the index position, can have multiple numbers passed through it

"{0:n3}" -f(#format) 123.456789 -> 123.456, three decimal points
"{0:n3}" -f(#format) 1 -> 00001, at least 5 digits

Get-Service | select-object -first 10 | foreach-object{"The service {0} is call '{1}': {2}" -f $_.name $_.displayname, $_.Status}


"Hello John" -replace "John", "[World]" # [] will change everything, lists nad wil 

Regex
--------------------------------------------------------------------------------
(ipconfig) -match 'IPv6', if its an array it will match that line

'[  Jon   Bon   Doe   ]' -rplace '\s+', ' '

(qprocess) -replace '\s{2,}', ', ' | select -First 10

'192.168.0.1' -replace '\d{1,3}', '255'

$list = 'comp1', 'comp2', 'comp3'
$pattern = 'comp(\d{1,3})'
$list -replace $pattern, 'Computer$1' $1, matches the number

$list -replace $pattern, 'Computer$1' '(This changed from $0)'

-------------------------------------------------------------------------
$profile -split '\.', splitting it based on "." \ is the backslash making it a literal

$profile -split '(?=\.)', will keep t he period, makes it an array
------------------------------------------------------------------------------
case sensitive splits
'GetHostByName' -csplit '(?<=[a-z])(?=[A-Z])', splittin on the capital letters

------------------------------------------------------------------------------------
joining

"cat","dog" -join ""

$env:username, "@", $env:computername, ".", $env:userdomain -join ""

------------------------------------------------------------------------
$matches stores matches

"Powershell is Awesome!" -match "\w+(\?|!)"

$matches
$matches

"10.0.0.22" -as [ipaddress] -as [bool]
-------------------------------------------------------------------------------------------------------
Functions
-------------------------------------------------------------------------------------------------------
function do-switch {
  param( Parameter(Mandatory=$true)
  param2 )
  
  code block

}

function Convert-ToDollars {
    param( 
      [Parameter(Mandatory=$true, Help, Message='Enter number of Euros.')]
      [Double]
      $Euro
    )
    $Dollar = $Euro * 1.4
    return USD: $Dollar
    
    
}

comments
# ....
<# ........................... #>

