Find Cmdlets Practice:

  to update help without any error messages, similar to bash and send error output to devnull

    update-help -force -ErrorAction SilentlyContinue

  Get-Process: Gets running processes
  Get-Service: Gets services installed on the local computer

  To write to or output objects to the screen:
  Two commands, write-host and write-output

    -write-host: only outputs to the host, cannot be piped
    -write-output: writes to host and can be used in a pipeline

  Variable manipulation

    Creating Variables:
      Set-Variable -name <> -value <>
      New-Variable -name <> -value <>
    Modify
      Set-Variable -name <> -value <>
    List
      Get-Variable -name <>
    Delete
      Clear-Variable -name <>

  Get a list of commands 

      Get-Command *<>*

  Reading User Input

      Read-Host <message to write to the host> #assign it to variable
    
Running Cmdlets
    
    Display list of processes
      get-process [-name <>]
    Get list of processes with wild cards
      get-process [-name <s*>]
    Getting the commandlets for aliases
      get-alias [-name <alias1>,<alias2>,<alias3>]
    Get firewall rules
      get-NetFirewallRUle
    Set aliases
      set-alias <alias> <cmdlet>
      get-alias <alias> #to find if the alias was created
-----------------------------------------------------------------------
Practical Exercise: Variables
    $var1 = Get-Random -Maximum 50 -Minimum 25
    $var2 = Get-Random -Maximum 10 -Minimum 1

    $sum =  $var1 + $var2
    $sub =  $var1 - $var2
    $prod = $var1 * $var2
    $quo =  $var1 / $var2

    foreach ($item in $sum,$sub,$prod,$quo) {
        write-output $item
    }
    write-output ""$var1" + "$var2" = "$sum""
    
    $var1 = Get-Random -Maximum 0 -Minimum -10
    $var2 = Get-Random -Maximum 20 -Minimum 1
    $var3= ($var1..$var2 | sort-object -reverse)

------------------------------------------------------------------------
Hash Tables
------------------------------------------------------------------------
$hash1 = [ordered]@{} #create an empty hash table

$hash2= [ordered]@{ #create hash with key / value
    "key"="value"
}

$hash1["Key1"]="Value1" #index method to add key / value

$hash1.add("Key2","Value2") #add method to add key / value
